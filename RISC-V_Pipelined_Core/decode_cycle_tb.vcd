$date
	Thu Jul 18 11:56:30 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module decode_cycle_tb $end
$var wire 1 ! ResultSrcE $end
$var wire 1 " RegWriteE $end
$var wire 5 # RS2_E [4:0] $end
$var wire 5 $ RS1_E [4:0] $end
$var wire 5 % RD_E [4:0] $end
$var wire 32 & RD2_E [31:0] $end
$var wire 32 ' RD1_E [31:0] $end
$var wire 32 ( PCPlus4E [31:0] $end
$var wire 32 ) PCE [31:0] $end
$var wire 1 * MemWriteE $end
$var wire 32 + Imm_Ext_E [31:0] $end
$var wire 1 , BranchE $end
$var wire 1 - ALUSrcE $end
$var wire 3 . ALUControlE [2:0] $end
$var reg 32 / InstrD [31:0] $end
$var reg 32 0 PCD [31:0] $end
$var reg 32 1 PCPlus4D [31:0] $end
$var reg 5 2 RDW [4:0] $end
$var reg 1 3 RegWriteW $end
$var reg 32 4 ResultW [31:0] $end
$var reg 1 5 clk $end
$var reg 1 6 rst $end
$scope module uut $end
$var wire 3 7 ALUControlE [2:0] $end
$var wire 1 - ALUSrcE $end
$var wire 1 , BranchE $end
$var wire 32 8 Imm_Ext_E [31:0] $end
$var wire 32 9 InstrD [31:0] $end
$var wire 1 * MemWriteE $end
$var wire 32 : PCD [31:0] $end
$var wire 32 ; PCE [31:0] $end
$var wire 32 < PCPlus4D [31:0] $end
$var wire 32 = PCPlus4E [31:0] $end
$var wire 32 > RD1_E [31:0] $end
$var wire 32 ? RD2_E [31:0] $end
$var wire 5 @ RDW [4:0] $end
$var wire 5 A RD_E [4:0] $end
$var wire 5 B RS1_E [4:0] $end
$var wire 5 C RS2_E [4:0] $end
$var wire 1 " RegWriteE $end
$var wire 1 3 RegWriteW $end
$var wire 1 ! ResultSrcE $end
$var wire 32 D ResultW [31:0] $end
$var wire 1 5 clk $end
$var wire 1 6 rst $end
$var wire 1 E ResultSrcD $end
$var wire 1 F RegWriteD $end
$var wire 32 G RD2_D [31:0] $end
$var wire 32 H RD1_D [31:0] $end
$var wire 1 I MemWriteD $end
$var wire 32 J Imm_Ext_D [31:0] $end
$var wire 2 K ImmSrcD [1:0] $end
$var wire 1 L BranchD $end
$var wire 1 M ALUSrcD $end
$var wire 3 N ALUControlD [2:0] $end
$var reg 3 O ALUControlD_r [2:0] $end
$var reg 1 P ALUSrcD_r $end
$var reg 1 Q BranchD_r $end
$var reg 32 R Imm_Ext_D_r [31:0] $end
$var reg 1 S MemWriteD_r $end
$var reg 32 T PCD_r [31:0] $end
$var reg 32 U PCPlus4D_r [31:0] $end
$var reg 32 V RD1_D_r [31:0] $end
$var reg 32 W RD2_D_r [31:0] $end
$var reg 5 X RD_D_r [4:0] $end
$var reg 5 Y RS1_D_r [4:0] $end
$var reg 5 Z RS2_D_r [4:0] $end
$var reg 1 [ RegWriteD_r $end
$var reg 1 \ ResultSrcD_r $end
$scope module control $end
$var wire 7 ] Op [6:0] $end
$var wire 3 ^ funct3 [2:0] $end
$var wire 7 _ funct7 [6:0] $end
$var wire 1 E ResultSrc $end
$var wire 1 F RegWrite $end
$var wire 1 I MemWrite $end
$var wire 2 ` ImmSrc [1:0] $end
$var wire 1 L Branch $end
$var wire 1 M ALUSrc $end
$var wire 2 a ALUOp [1:0] $end
$var wire 3 b ALUControl [2:0] $end
$scope module alu_decoder $end
$var wire 3 c funct3 [2:0] $end
$var wire 7 d funct7 [6:0] $end
$var wire 7 e op [6:0] $end
$var wire 2 f ALUOp [1:0] $end
$var wire 3 g ALUControl [2:0] $end
$upscope $end
$scope module main_decoder $end
$var wire 7 h Op [6:0] $end
$var wire 1 E ResultSrc $end
$var wire 1 F RegWrite $end
$var wire 1 I MemWrite $end
$var wire 2 i ImmSrc [1:0] $end
$var wire 1 L Branch $end
$var wire 1 M ALUSrc $end
$var wire 2 j ALUOp [1:0] $end
$upscope $end
$upscope $end
$scope module extension $end
$var wire 2 k ImmSrc [1:0] $end
$var wire 32 l In [31:0] $end
$var wire 32 m Imm_Ext [31:0] $end
$upscope $end
$scope module rf $end
$var wire 5 n A1 [4:0] $end
$var wire 5 o A2 [4:0] $end
$var wire 5 p A3 [4:0] $end
$var wire 32 q WD3 [31:0] $end
$var wire 1 3 WE3 $end
$var wire 1 5 clk $end
$var wire 1 6 rst $end
$var wire 1 r RD2 $end
$var wire 1 s RD1 $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
0s
0r
b0 q
b0 p
b0 o
b0 n
b0 m
b0 l
b0 k
b0 j
b0 i
b0 h
b0 g
b0 f
b0 e
b0 d
b0 c
b0 b
b0 a
b0 `
b0 _
b0 ^
b0 ]
x\
x[
b0 Z
b0 Y
b0 X
b0x W
b0x V
b0 U
b0 T
xS
bx R
xQ
xP
bx O
b0 N
0M
0L
b0 K
b0 J
0I
b0 H
b0 G
0F
0E
b0 D
b0 C
b0 B
b0 A
b0 @
b0x ?
b0x >
b0 =
b0 <
b0 ;
b0 :
b0 9
bx 8
bx 7
16
05
b0 4
03
b0 2
b0 1
b0 0
b0 /
bx .
x-
x,
bx +
x*
b0 )
b0 (
b0x '
b0x &
b0 %
b0 $
b0 #
x"
x!
$end
#5
b0 +
b0 8
b0 R
b0 &
b0 ?
b0 W
b0 '
b0 >
b0 V
b0 .
b0 7
b0 O
0,
0Q
0!
0\
0*
0S
0-
0P
0"
0[
15
#10
05
06
#15
15
#20
05
16
#25
1F
1M
b0x G
xr
b1111 J
b1111 m
b10011 ]
b10011 e
b10011 h
b1111 o
13
b10010001101000101011001111000 4
b10010001101000101011001111000 D
b10010001101000101011001111000 q
b1 2
b1 @
b1 p
b1000 1
b1000 <
b100 0
b100 :
b111100000000011110010011 /
b111100000000011110010011 9
b111100000000011110010011 l
15
#30
05
#35
b1111 #
b1111 C
b1111 Z
b1000 (
b1000 =
b1000 U
b100 )
b100 ;
b100 T
b1111 %
b1111 A
b1111 X
b1111 +
b1111 8
b1111 R
b0x &
b0x ?
b0x W
1-
1P
1"
1[
b1010 J
b1010 m
b1010 o
03
b10000111011001010100001100100001 4
b10000111011001010100001100100001 D
b10000111011001010100001100100001 q
b10 2
b10 @
b10 p
b1100 1
b1100 <
b1000 0
b1000 :
b101000000000010100010011 /
b101000000000010100010011 9
b101000000000010100010011 l
15
#40
05
#45
b1010 #
b1010 C
b1010 Z
b1100 (
b1100 =
b1100 U
b1000 )
b1000 ;
b1000 T
b1010 %
b1010 A
b1010 X
b1010 +
b1010 8
b1010 R
15
#50
05
#55
15
#60
05
#65
15
#70
05
#75
15
#80
05
#85
15
#90
05
#95
15
